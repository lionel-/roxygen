% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/doc-namespace.R
\name{@export}
\alias{@export}
\alias{@exportClass}
\alias{@exportMethod}
\alias{@exportPattern}
\title{Exports tags}
\description{
For a function to be usable outside of your package, you must \strong{export} it. By default roxygen2 doesn't export anything from your package. If you want an object to be publicly available, you must explicitly tag it with \verb{@export}.

Use the following guidelines to decide what to export:
\itemize{
\item Functions: export functions that you want to make available. Exported
functions must be documented, and you must be cautious when changing their
interface.
\item Datasets: all datasets are publicly available. They exist outside of the
package namespace and should not be exported.
\item S3 classes: if you want others to be able to create instances of the class
\verb{@export} the constructor function.
\item S3 generics: the generic is a function so \verb{@export} if you want it to
be usable outside the package
\item S3 methods: every S3 method \emph{must} be exported, even if the generic is not.
Otherwise the S3 method table will not be generated correctly and internal
generics will not find the correct method.

If you are providing a method for a generic defined in another package,
you must also import that generic.
\item S4 classes: if you want others to be able to extend your class, \verb{@export} it.
If you want others to create instances of your class, but not extend it,
\verb{@export} the constructor function, but not the class.\preformatted{```R
# Can extend and create
#' @export
setClass("A")

# Can extend, but constructor not exported
#' @export
B <- setClass("B")

# Can create, but not extend
#' @export C
C <- setClass("C")

# Can create and extend
#' @export D
#' @exportClass D
D <- setClass("D")
```
}
\item S4 generics: \verb{@export} if you want the generic to be publicly usable.
\item S4 methods: you only need to \verb{@export} methods for generics that you
did not define.
\item RC classes: the same principles apply as for S4 classes. \verb{@export}
will only export the class.
}
\subsection{Specialised exports}{

Generally, roxygen2 can generate the correct namespace directive when \verb{@export}ing a specific object. However, you may want to override the defaults and exercise greater control. In this case you can use the more specialised tags described below:
\itemize{
\item \verb{@export foo} generates \code{export(foo)}
\item \verb{@exportClass foo} generates \code{exportClasses(foo)}
\item \verb{@exportMethod foo} generates \code{exportMethods(foo)}
\item \verb{@exportPattern foo} generates \code{exportPattern(foo)}
}

For even more specialised cases you can use \verb{@rawNamespace code} which inserts \code{code} literally into the \code{NAMESPACE}. If you need to automate this, \verb{@evalNamespace foo()} will evaluate the \code{foo()} in the package environment and insert the results into \code{NAMESPACE}. Because \code{evalNamespace()} is run in the package environment, it can only generate exports, not imports.
}
}
