% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/doc-namespace.R
\name{@import}
\alias{@import}
\alias{@importFrom}
\alias{@importClassesFrom}
\alias{@importMethodsFrom}
\alias{@useDynLib}
\title{Imports tags}
\description{
The \code{NAMESPACE} also controls which functions from other packages are made available to your package. Only unique directives are saved to the \code{NAMESPACE} file, so you can repeat them as needed to maintain a close link between the functions where they are needed and the namespace file.

If you are using just a few functions from another package, the recommended option is to note the package name in the \verb{Imports:} field of the \code{DESCRIPTION} file and call the function(s) explicitly using \code{::}, e.g., \code{pkg::fun()}.  Alternatively, though no longer recommended due to its poorer readability, use \verb{@importFrom}, e.g., \verb{@importFrom pgk fun}, and call the function(s) without \code{::}.

If you are using many functions from another package, use \verb{@import package} to import them all and make available without using \code{::}.

If you want to add a new method to an S3 generic, import it with \verb{@importFrom pkg generic}.

If you are using S4 you may also need:
\itemize{
\item \verb{@importClassesFrom package classa classb ...} to import selected S4 classes.
\item \verb{@importMethodsFrom package methoda methodb ...} to import selected S4
methods.
}

To import compiled code from another package, use \verb{@useDynLib}
\itemize{
\item \verb{@useDynLib package} imports all compiled functions.
\item \verb{@useDynLib package routinea routineb} imports selected compiled functions.
\item Any \verb{@useDynLib} specification containing a comma, e.g.
\verb{@useDynLib mypackage, .registration = TRUE} will be inserted as is
into the the NAMESPACE, e.g. \code{useDynLib(mypackage, .registration = TRUE)}
}
}
